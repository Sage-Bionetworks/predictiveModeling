predictiveModel_cox$customTrain(dataSets_expr_clinical$featureData, dataSets_expr_clinical$responseData)
### get predicted survival values using customPredict
trainPredictions <- predictiveModel_cox$customPredict(dataSets_expr_clinical$featureData)
### to evaluate performance calculate concordance.index of the prediction versus observations
cIndex_train <- concordance.index(x=trainPredictions, surv.time=dataSets_expr_clinical$responseData[,"time"], surv.event=dataSets_expr_clinical$responseData[,"status"], na.rm=TRUE, alpha= .05)
cIndex_train$c.index # returns the cindex1
cIndex_train$lower # lower CI bound of cindex1
cIndex_train$upper # upper CI bound of cindex1
GlmnetModelCV <- GlmnetModel$new(family="cox")
cvResults_cox <- crossValidatePredictiveCoxModel(dataSets_expr_clinical$featureData, dataSets_expr_clinical$responseData, GlmnetModelCV, numFolds=5)
# by default, 5 fold cross validation
cindexTrain<-c()
cindexTest<-c()
for (i in 1:3){
cTrain<-concordance.index(x=cvResults_cox$trainPredictions[[i]], surv.time=cvResults_cox$trainObservations[[i]][,"time"], surv.event=cvResults_cox$trainObservations[[i]][,"status"], na.rm=TRUE, alpha= .05)
cindexTrain <- c(cindexTrain,cTrain$c.index)
cTest<-concordance.index(x=cvResults_cox$testPredictions[[i]], surv.time=cvResults_cox$testObservations[[i]][,"time"], surv.event=cvResults_cox$testObservations[[i]][,"status"], na.rm=TRUE, alpha= .05)
cindexTest <- c(cindexTest,cTest$c.index)
}
# graphical comparison
boxplot(cbind(cindexTrain,cindexTest))
cindexTrain
cindexTest
GlmnetModelCV <- GlmnetModel$new(family="cox")
cvResults_cox <- crossValidatePredictiveCoxModel(dataSets_expr_clinical$featureData, dataSets_expr_clinical$responseData, GlmnetModelCV, numFolds=5)
# by default, 5 fold cross validation
cvResults_cox
# by default, 5 fold cross validation
cindexTrain<-c()
cindexTest<-c()
for (i in 1:3){
cTrain<-concordance.index(x=cvResults_cox$trainPredictions[[i]], surv.time=cvResults_cox$trainObservations[[i]][,"time"], surv.event=cvResults_cox$trainObservations[[i]][,"status"], na.rm=TRUE, alpha= .05)
cindexTrain <- c(cindexTrain,cTrain$c.index)
cTest<-concordance.index(x=cvResults_cox$testPredictions[[i]], surv.time=cvResults_cox$testObservations[[i]][,"time"], surv.event=cvResults_cox$testObservations[[i]][,"status"], na.rm=TRUE, alpha= .05)
cindexTest <- c(cindexTest,cTest$c.index)
}
# graphical comparison
boxplot(cbind(cindexTrain,cindexTest))
cindexTrain
cindexTest
cvResults_cox$trainObservations[[i]][,"time"]
cvResults_cox$trainObservations[[i]][,"status"]
cvResults_cox$trainPredictions[[i]]
cvResults_cox
cvResults_cox$trainPredictions
idExpressionLayer_metabric <- "139167"
expressionLayer_metabric <- loadEntity(idExpressionLayer_metabric)
exprData_metabric <- exprs(expressionLayer_metabric$objects[[1]])[1:250,1:100]
idCopyLayer_metabric <- "139169"
copyLayer_metabric <- loadEntity(idCopyLayer_metabric)
copyData_metabric <- exprs(copyLayer_metabric$objects[[1]])[1:250,1:100]
idClinicalLayer_metabric <- "139171"
clinicalLayer_metabric <- loadEntity(idClinicalLayer_metabric)
clinicalData_metabric <- clinicalLayer_metabric$objects[[1]]@data[1:100,c("survDeath", "survYears")]
library(survival)
library(survcomp)
library(risksetROC)
## load the data
data(demoData)
checkTrue(exists('exprData_metabric'))
#checkTrue(all(rownames(pData(exprData_metabric)) == colnames(exprs(exprData_metabric))))
checkTrue(exists('copyData_metabric'))
#checkTrue(all(rownames(pData(copyData_metabric)) == colnames(exprs(copyData_metabric))))
checkTrue(exists('clinicalData_metabric'))
survObj <- Surv(clinicalData_metabric[,"survYears"], clinicalData_metabric[,"survDeath"])
#### prepare feature data for predictive modeling by transposing the matrix to have samples on the rows and features on the columns and scaling the columns
featureData <-t(createAggregateFeatureDataSet(list(expr = exprData_metabric, copy = copyData_metabric)))
dataSets_expr_clinical <- filterPredictiveModelData(featureData, survObj, filterFeatureNasBy = "columns")
#### Let's make a Cox model now.
predictiveModel_cox <- GlmnetModel$new(family="cox")
### as an example that runs quickly, train the model with the first 200 features
predictiveModel_cox$customTrain(dataSets_expr_clinical$featureData, dataSets_expr_clinical$responseData)
### get predicted survival values using customPredict
trainPredictions <- predictiveModel_cox$customPredict(dataSets_expr_clinical$featureData)
### to evaluate performance calculate concordance.index of the prediction versus observations
cIndex_train <- concordance.index(x=trainPredictions, surv.time=dataSets_expr_clinical$responseData[,"time"], surv.event=dataSets_expr_clinical$responseData[,"status"], na.rm=TRUE, alpha= .05)
cIndex_train$c.index # returns the cindex1
cIndex_train$lower # lower CI bound of cindex1
cIndex_train$upper # upper CI bound of cindex1
GlmnetModelCV <- GlmnetModel$new(family="cox")
cvResults_cox <- crossValidatePredictiveCoxModel(dataSets_expr_clinical$featureData, dataSets_expr_clinical$responseData, GlmnetModelCV, numFolds=5)
# by default, 5 fold cross validation
cindexTrain<-c()
cindexTest<-c()
for (i in 1:3){
cTrain<-concordance.index(x=cvResults_cox$trainPredictions[[i]], surv.time=cvResults_cox$trainObservations[[i]][,"time"], surv.event=cvResults_cox$trainObservations[[i]][,"status"], na.rm=TRUE, alpha= .05)
cindexTrain <- c(cindexTrain,cTrain$c.index)
cTest<-concordance.index(x=cvResults_cox$testPredictions[[i]], surv.time=cvResults_cox$testObservations[[i]][,"time"], surv.event=cvResults_cox$testObservations[[i]][,"status"], na.rm=TRUE, alpha= .05)
cindexTest <- c(cindexTest,cTest$c.index)
}
# graphical comparison
boxplot(cbind(cindexTrain,cindexTest))
idExpressionLayer_metabric <- "139167"
expressionLayer_metabric <- loadEntity(idExpressionLayer_metabric)
exprData_metabric <- exprs(expressionLayer_metabric$objects[[1]])[1:400,1:100]
idCopyLayer_metabric <- "139169"
copyLayer_metabric <- loadEntity(idCopyLayer_metabric)
copyData_metabric <- exprs(copyLayer_metabric$objects[[1]])[1:400,1:100]
idClinicalLayer_metabric <- "139171"
clinicalLayer_metabric <- loadEntity(idClinicalLayer_metabric)
clinicalData_metabric <- clinicalLayer_metabric$objects[[1]]@data[1:400,c("survDeath", "survYears")]
checkTrue(exists('exprData_metabric'))
#checkTrue(all(rownames(pData(exprData_metabric)) == colnames(exprs(exprData_metabric))))
checkTrue(exists('copyData_metabric'))
#checkTrue(all(rownames(pData(copyData_metabric)) == colnames(exprs(copyData_metabric))))
checkTrue(exists('clinicalData_metabric'))
survObj <- Surv(clinicalData_metabric[,"survYears"], clinicalData_metabric[,"survDeath"])
#### prepare feature data for predictive modeling by transposing the matrix to have samples on the rows and features on the columns and scaling the columns
featureData <-t(createAggregateFeatureDataSet(list(expr = exprData_metabric, copy = copyData_metabric)))
dataSets_expr_clinical <- filterPredictiveModelData(featureData, survObj, filterFeatureNasBy = "columns")
#### Let's make a Cox model now.
predictiveModel_cox <- GlmnetModel$new(family="cox")
### as an example that runs quickly, train the model with the first 200 features
predictiveModel_cox$customTrain(dataSets_expr_clinical$featureData, dataSets_expr_clinical$responseData)
### get predicted survival values using customPredict
trainPredictions <- predictiveModel_cox$customPredict(dataSets_expr_clinical$featureData)
### to evaluate performance calculate concordance.index of the prediction versus observations
cIndex_train <- concordance.index(x=trainPredictions, surv.time=dataSets_expr_clinical$responseData[,"time"], surv.event=dataSets_expr_clinical$responseData[,"status"], na.rm=TRUE, alpha= .05)
cIndex_train$c.index # returns the cindex1
cIndex_train$lower # lower CI bound of cindex1
cIndex_train$upper # upper CI bound of cindex1
GlmnetModelCV <- GlmnetModel$new(family="cox")
cvResults_cox <- crossValidatePredictiveCoxModel(dataSets_expr_clinical$featureData, dataSets_expr_clinical$responseData, GlmnetModelCV, numFolds=5)
# by default, 5 fold cross validation
cindexTrain<-c()
cindexTest<-c()
for (i in 1:3){
cTrain<-concordance.index(x=cvResults_cox$trainPredictions[[i]], surv.time=cvResults_cox$trainObservations[[i]][,"time"], surv.event=cvResults_cox$trainObservations[[i]][,"status"], na.rm=TRUE, alpha= .05)
cindexTrain <- c(cindexTrain,cTrain$c.index)
cTest<-concordance.index(x=cvResults_cox$testPredictions[[i]], surv.time=cvResults_cox$testObservations[[i]][,"time"], surv.event=cvResults_cox$testObservations[[i]][,"status"], na.rm=TRUE, alpha= .05)
cindexTest <- c(cindexTest,cTest$c.index)
}
# graphical comparison
boxplot(cbind(cindexTrain,cindexTest))
idExpressionLayer_metabric <- "139167"
expressionLayer_metabric <- loadEntity(idExpressionLayer_metabric)
exprData_metabric <- exprs(expressionLayer_metabric$objects[[1]])[1:100,1:200]
idCopyLayer_metabric <- "139169"
copyLayer_metabric <- loadEntity(idCopyLayer_metabric)
copyData_metabric <- exprs(copyLayer_metabric$objects[[1]])[1:100,1:200]
idClinicalLayer_metabric <- "139171"
clinicalLayer_metabric <- loadEntity(idClinicalLayer_metabric)
clinicalData_metabric <- clinicalLayer_metabric$objects[[1]]@data[1:200,c("survDeath", "survYears")]
checkTrue(exists('exprData_metabric'))
#checkTrue(all(rownames(pData(exprData_metabric)) == colnames(exprs(exprData_metabric))))
checkTrue(exists('copyData_metabric'))
#checkTrue(all(rownames(pData(copyData_metabric)) == colnames(exprs(copyData_metabric))))
checkTrue(exists('clinicalData_metabric'))
survObj <- Surv(clinicalData_metabric[,"survYears"], clinicalData_metabric[,"survDeath"])
#### prepare feature data for predictive modeling by transposing the matrix to have samples on the rows and features on the columns and scaling the columns
featureData <-t(createAggregateFeatureDataSet(list(expr = exprData_metabric, copy = copyData_metabric)))
dataSets_expr_clinical <- filterPredictiveModelData(featureData, survObj, filterFeatureNasBy = "columns")
#### Let's make a Cox model now.
predictiveModel_cox <- GlmnetModel$new(family="cox")
### as an example that runs quickly, train the model with the first 200 features
predictiveModel_cox$customTrain(dataSets_expr_clinical$featureData, dataSets_expr_clinical$responseData)
### get predicted survival values using customPredict
trainPredictions <- predictiveModel_cox$customPredict(dataSets_expr_clinical$featureData)
### to evaluate performance calculate concordance.index of the prediction versus observations
cIndex_train <- concordance.index(x=trainPredictions, surv.time=dataSets_expr_clinical$responseData[,"time"], surv.event=dataSets_expr_clinical$responseData[,"status"], na.rm=TRUE, alpha= .05)
cIndex_train$c.index # returns the cindex1
cIndex_train$lower # lower CI bound of cindex1
cIndex_train$upper # upper CI bound of cindex1
GlmnetModelCV <- GlmnetModel$new(family="cox")
cvResults_cox <- crossValidatePredictiveCoxModel(dataSets_expr_clinical$featureData, dataSets_expr_clinical$responseData, GlmnetModelCV, numFolds=5)
# by default, 5 fold cross validation
cindexTrain<-c()
cindexTest<-c()
for (i in 1:3){
cTrain<-concordance.index(x=cvResults_cox$trainPredictions[[i]], surv.time=cvResults_cox$trainObservations[[i]][,"time"], surv.event=cvResults_cox$trainObservations[[i]][,"status"], na.rm=TRUE, alpha= .05)
cindexTrain <- c(cindexTrain,cTrain$c.index)
cTest<-concordance.index(x=cvResults_cox$testPredictions[[i]], surv.time=cvResults_cox$testObservations[[i]][,"time"], surv.event=cvResults_cox$testObservations[[i]][,"status"], na.rm=TRUE, alpha= .05)
cindexTest <- c(cindexTest,cTest$c.index)
}
# graphical comparison
boxplot(cbind(cindexTrain,cindexTest))
idExpressionLayer_metabric <- "139167"
expressionLayer_metabric <- loadEntity(idExpressionLayer_metabric)
exprData_metabric <- exprs(expressionLayer_metabric$objects[[1]])[1:400,1:200]
idCopyLayer_metabric <- "139169"
copyLayer_metabric <- loadEntity(idCopyLayer_metabric)
copyData_metabric <- exprs(copyLayer_metabric$objects[[1]])[1:400,1:200]
idClinicalLayer_metabric <- "139171"
clinicalLayer_metabric <- loadEntity(idClinicalLayer_metabric)
clinicalData_metabric <- clinicalLayer_metabric$objects[[1]]@data[1:200,c("survDeath", "survYears")]
checkTrue(exists('exprData_metabric'))
#checkTrue(all(rownames(pData(exprData_metabric)) == colnames(exprs(exprData_metabric))))
checkTrue(exists('copyData_metabric'))
#checkTrue(all(rownames(pData(copyData_metabric)) == colnames(exprs(copyData_metabric))))
checkTrue(exists('clinicalData_metabric'))
survObj <- Surv(clinicalData_metabric[,"survYears"], clinicalData_metabric[,"survDeath"])
#### prepare feature data for predictive modeling by transposing the matrix to have samples on the rows and features on the columns and scaling the columns
featureData <-t(createAggregateFeatureDataSet(list(expr = exprData_metabric, copy = copyData_metabric)))
dataSets_expr_clinical <- filterPredictiveModelData(featureData, survObj, filterFeatureNasBy = "columns")
#### Let's make a Cox model now.
predictiveModel_cox <- GlmnetModel$new(family="cox")
### as an example that runs quickly, train the model with the first 200 features
predictiveModel_cox$customTrain(dataSets_expr_clinical$featureData, dataSets_expr_clinical$responseData)
### get predicted survival values using customPredict
trainPredictions <- predictiveModel_cox$customPredict(dataSets_expr_clinical$featureData)
### to evaluate performance calculate concordance.index of the prediction versus observations
cIndex_train <- concordance.index(x=trainPredictions, surv.time=dataSets_expr_clinical$responseData[,"time"], surv.event=dataSets_expr_clinical$responseData[,"status"], na.rm=TRUE, alpha= .05)
cIndex_train$c.index # returns the cindex1
cIndex_train$lower # lower CI bound of cindex1
cIndex_train$upper # upper CI bound of cindex1
GlmnetModelCV <- GlmnetModel$new(family="cox")
cvResults_cox <- crossValidatePredictiveCoxModel(dataSets_expr_clinical$featureData, dataSets_expr_clinical$responseData, GlmnetModelCV, numFolds=5)
# by default, 5 fold cross validation
cindexTrain<-c()
cindexTest<-c()
for (i in 1:3){
cTrain<-concordance.index(x=cvResults_cox$trainPredictions[[i]], surv.time=cvResults_cox$trainObservations[[i]][,"time"], surv.event=cvResults_cox$trainObservations[[i]][,"status"], na.rm=TRUE, alpha= .05)
cindexTrain <- c(cindexTrain,cTrain$c.index)
cTest<-concordance.index(x=cvResults_cox$testPredictions[[i]], surv.time=cvResults_cox$testObservations[[i]][,"time"], surv.event=cvResults_cox$testObservations[[i]][,"status"], na.rm=TRUE, alpha= .05)
cindexTest <- c(cindexTest,cTest$c.index)
}
# graphical comparison
boxplot(cbind(cindexTrain,cindexTest))
idExpressionLayer_metabric <- "139167"
expressionLayer_metabric <- loadEntity(idExpressionLayer_metabric)
exprData_metabric <- exprs(expressionLayer_metabric$objects[[1]])[1:1000,1:200]
idCopyLayer_metabric <- "139169"
copyLayer_metabric <- loadEntity(idCopyLayer_metabric)
copyData_metabric <- exprs(copyLayer_metabric$objects[[1]])[1:1000,1:200]
idClinicalLayer_metabric <- "139171"
clinicalLayer_metabric <- loadEntity(idClinicalLayer_metabric)
clinicalData_metabric <- clinicalLayer_metabric$objects[[1]]@data[1:200,c("survDeath", "survYears")]
checkTrue(exists('exprData_metabric'))
#checkTrue(all(rownames(pData(exprData_metabric)) == colnames(exprs(exprData_metabric))))
checkTrue(exists('copyData_metabric'))
#checkTrue(all(rownames(pData(copyData_metabric)) == colnames(exprs(copyData_metabric))))
checkTrue(exists('clinicalData_metabric'))
survObj <- Surv(clinicalData_metabric[,"survYears"], clinicalData_metabric[,"survDeath"])
#### prepare feature data for predictive modeling by transposing the matrix to have samples on the rows and features on the columns and scaling the columns
featureData <-t(createAggregateFeatureDataSet(list(expr = exprData_metabric, copy = copyData_metabric)))
dataSets_expr_clinical <- filterPredictiveModelData(featureData, survObj, filterFeatureNasBy = "columns")
#### Let's make a Cox model now.
predictiveModel_cox <- GlmnetModel$new(family="cox")
### as an example that runs quickly, train the model with the first 200 features
predictiveModel_cox$customTrain(dataSets_expr_clinical$featureData, dataSets_expr_clinical$responseData)
### get predicted survival values using customPredict
trainPredictions <- predictiveModel_cox$customPredict(dataSets_expr_clinical$featureData)
### to evaluate performance calculate concordance.index of the prediction versus observations
cIndex_train <- concordance.index(x=trainPredictions, surv.time=dataSets_expr_clinical$responseData[,"time"], surv.event=dataSets_expr_clinical$responseData[,"status"], na.rm=TRUE, alpha= .05)
cIndex_train$c.index # returns the cindex1
cIndex_train$lower # lower CI bound of cindex1
cIndex_train$upper # upper CI bound of cindex1
GlmnetModelCV <- GlmnetModel$new(family="cox")
cvResults_cox <- crossValidatePredictiveCoxModel(dataSets_expr_clinical$featureData, dataSets_expr_clinical$responseData, GlmnetModelCV, numFolds=5)
idExpressionLayer_metabric <- "139167"
expressionLayer_metabric <- loadEntity(idExpressionLayer_metabric)
exprData_metabric <- exprs(expressionLayer_metabric$objects[[1]])[1:1000,1:400]
idCopyLayer_metabric <- "139169"
copyLayer_metabric <- loadEntity(idCopyLayer_metabric)
copyData_metabric <- exprs(copyLayer_metabric$objects[[1]])[1:1000,1:400]
idClinicalLayer_metabric <- "139171"
clinicalLayer_metabric <- loadEntity(idClinicalLayer_metabric)
clinicalData_metabric <- clinicalLayer_metabric$objects[[1]]@data[1:400,c("survDeath", "survYears")]
checkTrue(exists('exprData_metabric'))
#checkTrue(all(rownames(pData(exprData_metabric)) == colnames(exprs(exprData_metabric))))
checkTrue(exists('copyData_metabric'))
#checkTrue(all(rownames(pData(copyData_metabric)) == colnames(exprs(copyData_metabric))))
checkTrue(exists('clinicalData_metabric'))
survObj <- Surv(clinicalData_metabric[,"survYears"], clinicalData_metabric[,"survDeath"])
#### prepare feature data for predictive modeling by transposing the matrix to have samples on the rows and features on the columns and scaling the columns
featureData <-t(createAggregateFeatureDataSet(list(expr = exprData_metabric, copy = copyData_metabric)))
dataSets_expr_clinical <- filterPredictiveModelData(featureData, survObj, filterFeatureNasBy = "columns")
#### Let's make a Cox model now.
predictiveModel_cox <- GlmnetModel$new(family="cox")
### as an example that runs quickly, train the model with the first 200 features
predictiveModel_cox$customTrain(dataSets_expr_clinical$featureData, dataSets_expr_clinical$responseData)
### get predicted survival values using customPredict
trainPredictions <- predictiveModel_cox$customPredict(dataSets_expr_clinical$featureData)
### to evaluate performance calculate concordance.index of the prediction versus observations
cIndex_train <- concordance.index(x=trainPredictions, surv.time=dataSets_expr_clinical$responseData[,"time"], surv.event=dataSets_expr_clinical$responseData[,"status"], na.rm=TRUE, alpha= .05)
cIndex_train$c.index # returns the cindex1
cIndex_train$lower # lower CI bound of cindex1
cIndex_train$upper # upper CI bound of cindex1
GlmnetModelCV <- GlmnetModel$new(family="cox")
cvResults_cox <- crossValidatePredictiveCoxModel(dataSets_expr_clinical$featureData, dataSets_expr_clinical$responseData, GlmnetModelCV, numFolds=5)
idExpressionLayer_metabric <- "139167"
expressionLayer_metabric <- loadEntity(idExpressionLayer_metabric)
exprData_metabric <- exprs(expressionLayer_metabric$objects[[1]])[1:500,1:400]
idCopyLayer_metabric <- "139169"
copyLayer_metabric <- loadEntity(idCopyLayer_metabric)
copyData_metabric <- exprs(copyLayer_metabric$objects[[1]])[1:500,1:400]
idClinicalLayer_metabric <- "139171"
clinicalLayer_metabric <- loadEntity(idClinicalLayer_metabric)
clinicalData_metabric <- clinicalLayer_metabric$objects[[1]]@data[1:400,c("survDeath", "survYears")]
checkTrue(exists('exprData_metabric'))
#checkTrue(all(rownames(pData(exprData_metabric)) == colnames(exprs(exprData_metabric))))
checkTrue(exists('copyData_metabric'))
#checkTrue(all(rownames(pData(copyData_metabric)) == colnames(exprs(copyData_metabric))))
checkTrue(exists('clinicalData_metabric'))
survObj <- Surv(clinicalData_metabric[,"survYears"], clinicalData_metabric[,"survDeath"])
#### prepare feature data for predictive modeling by transposing the matrix to have samples on the rows and features on the columns and scaling the columns
featureData <-t(createAggregateFeatureDataSet(list(expr = exprData_metabric, copy = copyData_metabric)))
dataSets_expr_clinical <- filterPredictiveModelData(featureData, survObj, filterFeatureNasBy = "columns")
#### Let's make a Cox model now.
predictiveModel_cox <- GlmnetModel$new(family="cox")
### as an example that runs quickly, train the model with the first 200 features
predictiveModel_cox$customTrain(dataSets_expr_clinical$featureData, dataSets_expr_clinical$responseData)
### get predicted survival values using customPredict
trainPredictions <- predictiveModel_cox$customPredict(dataSets_expr_clinical$featureData)
### to evaluate performance calculate concordance.index of the prediction versus observations
cIndex_train <- concordance.index(x=trainPredictions, surv.time=dataSets_expr_clinical$responseData[,"time"], surv.event=dataSets_expr_clinical$responseData[,"status"], na.rm=TRUE, alpha= .05)
cIndex_train$c.index # returns the cindex1
cIndex_train$lower # lower CI bound of cindex1
cIndex_train$upper # upper CI bound of cindex1
GlmnetModelCV <- GlmnetModel$new(family="cox")
cvResults_cox <- crossValidatePredictiveCoxModel(dataSets_expr_clinical$featureData, dataSets_expr_clinical$responseData, GlmnetModelCV, numFolds=5)
# by default, 5 fold cross validation
cindexTrain<-c()
cindexTest<-c()
for (i in 1:3){
cTrain<-concordance.index(x=cvResults_cox$trainPredictions[[i]], surv.time=cvResults_cox$trainObservations[[i]][,"time"], surv.event=cvResults_cox$trainObservations[[i]][,"status"], na.rm=TRUE, alpha= .05)
cindexTrain <- c(cindexTrain,cTrain$c.index)
cTest<-concordance.index(x=cvResults_cox$testPredictions[[i]], surv.time=cvResults_cox$testObservations[[i]][,"time"], surv.event=cvResults_cox$testObservations[[i]][,"status"], na.rm=TRUE, alpha= .05)
cindexTest <- c(cindexTest,cTest$c.index)
}
# graphical comparison
boxplot(cbind(cindexTrain,cindexTest))
idExpressionLayer_metabric <- "139167"
expressionLayer_metabric <- loadEntity(idExpressionLayer_metabric)
exprData_metabric <- exprs(expressionLayer_metabric$objects[[1]])[1:250,1:400]
idCopyLayer_metabric <- "139169"
copyLayer_metabric <- loadEntity(idCopyLayer_metabric)
copyData_metabric <- exprs(copyLayer_metabric$objects[[1]])[1:250,1:400]
idClinicalLayer_metabric <- "139171"
clinicalLayer_metabric <- loadEntity(idClinicalLayer_metabric)
clinicalData_metabric <- clinicalLayer_metabric$objects[[1]]@data[1:400,c("survDeath", "survYears")]
checkTrue(exists('exprData_metabric'))
#checkTrue(all(rownames(pData(exprData_metabric)) == colnames(exprs(exprData_metabric))))
checkTrue(exists('copyData_metabric'))
#checkTrue(all(rownames(pData(copyData_metabric)) == colnames(exprs(copyData_metabric))))
checkTrue(exists('clinicalData_metabric'))
survObj <- Surv(clinicalData_metabric[,"survYears"], clinicalData_metabric[,"survDeath"])
#### prepare feature data for predictive modeling by transposing the matrix to have samples on the rows and features on the columns and scaling the columns
featureData <-t(createAggregateFeatureDataSet(list(expr = exprData_metabric, copy = copyData_metabric)))
dataSets_expr_clinical <- filterPredictiveModelData(featureData, survObj, filterFeatureNasBy = "columns")
#### Let's make a Cox model now.
predictiveModel_cox <- GlmnetModel$new(family="cox")
### as an example that runs quickly, train the model with the first 200 features
predictiveModel_cox$customTrain(dataSets_expr_clinical$featureData, dataSets_expr_clinical$responseData)
### get predicted survival values using customPredict
trainPredictions <- predictiveModel_cox$customPredict(dataSets_expr_clinical$featureData)
### to evaluate performance calculate concordance.index of the prediction versus observations
cIndex_train <- concordance.index(x=trainPredictions, surv.time=dataSets_expr_clinical$responseData[,"time"], surv.event=dataSets_expr_clinical$responseData[,"status"], na.rm=TRUE, alpha= .05)
cIndex_train$c.index # returns the cindex1
cIndex_train$lower # lower CI bound of cindex1
cIndex_train$upper # upper CI bound of cindex1
GlmnetModelCV <- GlmnetModel$new(family="cox")
cvResults_cox <- crossValidatePredictiveCoxModel(dataSets_expr_clinical$featureData, dataSets_expr_clinical$responseData, GlmnetModelCV, numFolds=5)
# by default, 5 fold cross validation
cindexTrain<-c()
cindexTest<-c()
for (i in 1:3){
cTrain<-concordance.index(x=cvResults_cox$trainPredictions[[i]], surv.time=cvResults_cox$trainObservations[[i]][,"time"], surv.event=cvResults_cox$trainObservations[[i]][,"status"], na.rm=TRUE, alpha= .05)
cindexTrain <- c(cindexTrain,cTrain$c.index)
cTest<-concordance.index(x=cvResults_cox$testPredictions[[i]], surv.time=cvResults_cox$testObservations[[i]][,"time"], surv.event=cvResults_cox$testObservations[[i]][,"status"], na.rm=TRUE, alpha= .05)
cindexTest <- c(cindexTest,cTest$c.index)
}
# graphical comparison
boxplot(cbind(cindexTrain,cindexTest))
setwd("/home/ben/Code/COMPBIO/predictiveModeling/data/")
idExpressionLayer_metabric <- "139167"
expressionLayer_metabric <- loadEntity(idExpressionLayer_metabric)
exprData_metabric <- exprs(expressionLayer_metabric$objects[[1]])[1:250,1:400]
idCopyLayer_metabric <- "139169"
copyLayer_metabric <- loadEntity(idCopyLayer_metabric)
copyData_metabric <- exprs(copyLayer_metabric$objects[[1]])[1:250,1:400]
idClinicalLayer_metabric <- "139171"
clinicalLayer_metabric <- loadEntity(idClinicalLayer_metabric)
clinicalData_metabric <- clinicalLayer_metabric$objects[[1]]@data[1:400,c("survDeath", "survYears")]
idExpressionLayer_ccle <- "48344"
expressionLayer_ccle <- loadEntity(idExpressionLayer_ccle)
exprData_ccle <- expressionLayer_ccle$objects$exprSet
idCopyLayer_ccle <- "48339"
copyLayer_ccle <- loadEntity(idCopyLayer_ccle)
copyData_ccle <- copyLayer_ccle$objects$copySet
idOncomapLayer_ccle <- "48341"
oncomapLayer_ccle <- loadEntity(idOncomapLayer_ccle)
oncomapData_ccle <- oncomapLayer_ccle$objects$oncomapSet
idDrugLayer_sanger <- "48337"
drugLayer_sanger <- loadEntity(idDrugLayer_sanger)
drugData_sanger <- drugLayer_sanger$objects$sangerADF
save(exprData_metabric, copyData_metabric, clinicalData_metabric, exprData_ccle, copyData_ccle, oncomapData_ccle, drugData_sanger , file="demoData.rda" )
library(synapseClient)
synapseLogin()
setwd("/home/ben/Code/COMPBIO/predictiveModeling/data/")
idExpressionLayer_metabric <- "139167"
expressionLayer_metabric <- loadEntity(idExpressionLayer_metabric)
exprData_metabric <- exprs(expressionLayer_metabric$objects[[1]])[1:250,1:400]
idCopyLayer_metabric <- "139169"
copyLayer_metabric <- loadEntity(idCopyLayer_metabric)
copyData_metabric <- exprs(copyLayer_metabric$objects[[1]])[1:250,1:400]
idClinicalLayer_metabric <- "139171"
clinicalLayer_metabric <- loadEntity(idClinicalLayer_metabric)
clinicalData_metabric <- clinicalLayer_metabric$objects[[1]]@data[1:400,c("survDeath", "survYears")]
#idExpressionLayer_ccle <- "48344"
#expressionLayer_ccle <- loadEntity(idExpressionLayer_ccle)
#exprData_ccle <- expressionLayer_ccle$objects$exprSet
#idCopyLayer_ccle <- "48339"
#copyLayer_ccle <- loadEntity(idCopyLayer_ccle)
#copyData_ccle <- copyLayer_ccle$objects$copySet
#idOncomapLayer_ccle <- "48341"
#oncomapLayer_ccle <- loadEntity(idOncomapLayer_ccle)
#oncomapData_ccle <- oncomapLayer_ccle$objects$oncomapSet
#idDrugLayer_sanger <- "48337"
#drugLayer_sanger <- loadEntity(idDrugLayer_sanger)
#drugData_sanger <- drugLayer_sanger$objects$sangerADF
save(exprData_metabric, copyData_metabric, clinicalData_metabric, exprData_ccle, copyData_ccle, oncomapData_ccle, drugData_sanger , file="demoData.rda" )
View(clinicalData_metabric)
idExpressionLayer_metabric <- "139167"
expressionLayer_metabric <- loadEntity(idExpressionLayer_metabric)
exprData_metabric <- exprs(expressionLayer_metabric$objects[[1]])[1:250,1:400]
idCopyLayer_metabric <- "139169"
copyLayer_metabric <- loadEntity(idCopyLayer_metabric)
copyData_metabric <- exprs(copyLayer_metabric$objects[[1]])[1:250,1:400]
idClinicalLayer_metabric <- "139171"
clinicalLayer_metabric <- loadEntity(idClinicalLayer_metabric)
clinicalData_metabric <- clinicalLayer_metabric$objects[[1]]@data[1:400,c("survDeath", "survYears")]
#idExpressionLayer_ccle <- "48344"
#expressionLayer_ccle <- loadEntity(idExpressionLayer_ccle)
#exprData_ccle <- expressionLayer_ccle$objects$exprSet
#idCopyLayer_ccle <- "48339"
#copyLayer_ccle <- loadEntity(idCopyLayer_ccle)
#copyData_ccle <- copyLayer_ccle$objects$copySet
#idOncomapLayer_ccle <- "48341"
#oncomapLayer_ccle <- loadEntity(idOncomapLayer_ccle)
#oncomapData_ccle <- oncomapLayer_ccle$objects$oncomapSet
#idDrugLayer_sanger <- "48337"
#drugLayer_sanger <- loadEntity(idDrugLayer_sanger)
#drugData_sanger <- drugLayer_sanger$objects$sangerADF
save(exprData_metabric, copyData_metabric, clinicalData_metabric, exprData_ccle, copyData_ccle, oncomapData_ccle, drugData_sanger , file="demoData.rda" )
idExpressionLayer_ccle <- "48344"
expressionLayer_ccle <- loadEntity(idExpressionLayer_ccle)
exprData_ccle <- expressionLayer_ccle$objects$exprSet
idCopyLayer_ccle <- "48339"
copyLayer_ccle <- loadEntity(idCopyLayer_ccle)
copyData_ccle <- copyLayer_ccle$objects$copySet
idOncomapLayer_ccle <- "48341"
oncomapLayer_ccle <- loadEntity(idOncomapLayer_ccle)
oncomapData_ccle <- oncomapLayer_ccle$objects$oncomapSet
idDrugLayer_sanger <- "48337"
drugLayer_sanger <- loadEntity(idDrugLayer_sanger)
drugData_sanger <- drugLayer_sanger$objects$sangerADF
save(exprData_metabric, copyData_metabric, clinicalData_metabric, exprData_ccle, copyData_ccle, oncomapData_ccle, drugData_sanger , file="demoData.rda" )
setwd("/home/ben/Code/COMPBIO/predictiveModeling/data/")
idExpressionLayer_metabric <- "139167"
expressionLayer_metabric <- loadEntity(idExpressionLayer_metabric)
exprData_metabric <- exprs(expressionLayer_metabric$objects[[1]])[1:250,1:400]
idCopyLayer_metabric <- "139169"
copyLayer_metabric <- loadEntity(idCopyLayer_metabric)
copyData_metabric <- exprs(copyLayer_metabric$objects[[1]])[1:250,1:400]
idClinicalLayer_metabric <- "139171"
clinicalLayer_metabric <- loadEntity(idClinicalLayer_metabric)
clinicalData_metabric <- clinicalLayer_metabric$objects[[1]]@data[1:400,c("survDeath", "survYears")]
idExpressionLayer_ccle <- "48344"
expressionLayer_ccle <- loadEntity(idExpressionLayer_ccle)
exprData_ccle <- expressionLayer_ccle$objects$exprSet
idCopyLayer_ccle <- "48339"
copyLayer_ccle <- loadEntity(idCopyLayer_ccle)
copyData_ccle <- copyLayer_ccle$objects$copySet
idOncomapLayer_ccle <- "48341"
oncomapLayer_ccle <- loadEntity(idOncomapLayer_ccle)
oncomapData_ccle <- oncomapLayer_ccle$objects$oncomapSet
idDrugLayer_sanger <- "48337"
drugLayer_sanger <- loadEntity(idDrugLayer_sanger)
drugData_sanger <- drugLayer_sanger$objects$sangerADF
save(exprData_metabric, copyData_metabric, clinicalData_metabric, exprData_ccle, copyData_ccle, oncomapData_ccle, drugData_sanger , file="demoData.rda" )
fix(drugData_sanger)
fix(expressionLayer_ccle)
fix(drugData_sanger)
str(drugData_sanger)
save(exprData_ccle, copyData_ccle, oncomapData_ccle, drugData_sanger , file="demoData.rda" )
idExpressionLayer_metabric <- "139167"
expressionLayer_metabric <- loadEntity(idExpressionLayer_metabric)
exprData_metabric <- exprs(expressionLayer_metabric$objects[[1]])[1:1000,1:400]
idCopyLayer_metabric <- "139169"
copyLayer_metabric <- loadEntity(idCopyLayer_metabric)
copyData_metabric <- exprs(copyLayer_metabric$objects[[1]])[1:1000,1:400]
idClinicalLayer_metabric <- "139171"
clinicalLayer_metabric <- loadEntity(idClinicalLayer_metabric)
clinicalData_metabric <- clinicalLayer_metabric$objects[[1]]@data[1:400,c("survDeath", "survYears")]
save(exprData_metabric, copyData_metabric, clinicalData_metabric , file="demoData.rda" )
save(exprData_metabric, copyData_metabric, clinicalData_metabric, copyData_ccle, oncomapData_ccle, drugData_sanger , file="demoData.rda" )
library(synapseClient)
synapseLogin()
setwd("/home/ben/Code/COMPBIO/predictiveModeling/data/")
idExpressionLayer_metabric <- "139167"
expressionLayer_metabric <- loadEntity(idExpressionLayer_metabric)
exprData_metabric <- exprs(expressionLayer_metabric$objects[[1]])[1:1000,1:400]
idCopyLayer_metabric <- "139169"
copyLayer_metabric <- loadEntity(idCopyLayer_metabric)
copyData_metabric <- exprs(copyLayer_metabric$objects[[1]])[1:1000,1:400]
idClinicalLayer_metabric <- "139171"
clinicalLayer_metabric <- loadEntity(idClinicalLayer_metabric)
clinicalData_metabric <- clinicalLayer_metabric$objects[[1]]@data[1:400,c("survDeath", "survYears")]
#idExpressionLayer_ccle <- "48344"
#expressionLayer_ccle <- loadEntity(idExpressionLayer_ccle)
#exprData_ccle <- expressionLayer_ccle$objects$exprSet
idCopyLayer_ccle <- "48339"
copyLayer_ccle <- loadEntity(idCopyLayer_ccle)
copyData_ccle <- copyLayer_ccle$objects$copySet
idOncomapLayer_ccle <- "48341"
oncomapLayer_ccle <- loadEntity(idOncomapLayer_ccle)
oncomapData_ccle <- oncomapLayer_ccle$objects$oncomapSet
idDrugLayer_sanger <- "48337"
drugLayer_sanger <- loadEntity(idDrugLayer_sanger)
drugData_sanger <- drugLayer_sanger$objects$sangerADF
save(exprData_metabric, copyData_metabric, clinicalData_metabric, copyData_ccle, oncomapData_ccle, drugData_sanger , file="demoData.rda" )
